public class SpreadSheetProject {
    private String[] tabs;
    private int nextAvailable; // Number of items in list (note: NOT capacity)
    private int nextSheetNumber; // Number of next sheet added to list   
    private int capacity;
    
    public SpreadSheetProject() {
        tabs = new String[256];
        tabs[0] = "Sheet1";
        tabs[1] = "Sheet2";
        tabs[2] = "Sheet3";
        nextAvailable = 3; // Initially the list has 3 tabs (as shown above)
        nextSheetNumber = 4; // The next NEW sheet number       
        capacity=3;
    }
    //add
    public boolean add(){
        if(nextAvailable<256){
        tabs[nextAvailable]="Sheet"+nextSheetNumber;
        nextAvailable++;
        nextSheetNumber++;
        capacity++;
        return true;
    }else{return false;}
    }
    //remove index
    public String remove(int index){
        String temp[]=new String[256];
        String output="";
        index = index -1;
        //*index -1* because the range is 1 >= index <= list length
        if (index>=0 && index<=capacity){
            for (int i=0;i<capacity;i++){
                if (i<index){
                    temp[i]=tabs[i];
                }
                if (i>index){
                    temp[i-1]=tabs[i];
                }
                if (i==index){
                    output=tabs[index];
                }
            }
            capacity--;
            nextAvailable--;
            tabs=temp;
        }
        return output;
    }
    //remove string
    public int remove(String sheetName) {       
        int pos = index(sheetName);
        tabs[pos] = null;
        String[] temp = new String[256];
        int i = 0;
        if (pos != -1) {
            for (i=0;i<capacity;i++){
                if (i<pos){
                    temp[i]=tabs[i];
                }
                if (i>pos){
                    temp[i-1]=tabs[i];
                }
            }
            tabs = temp;
            capacity--;
            nextAvailable--;
            return pos;
        } else { return -1;
        }
    }
    //display
    public void Display(){
        for(int i=0;i<capacity;i++){
            System.out.print(tabs[i]); //Decided to print horizontally as BlueJ seems to limit how many lines can be used;
            if (i == capacity - 1) {
                System.out.print("\n");
            }
            System.out.print(", ");
        }
        System.out.println("- - - - -");
    }
    //index
    public int index(String sheetName) {
        for(int i = 0; i < capacity; i++){
            if (sheetName.equalsIgnoreCase(tabs[i]) == true) {
                return i;
            } 
        }
        return -1;
    }
    //used length of array
    public int length() {
        return capacity;
    }        
    //finds sheet name by index
    public String sheetName(int index) {
        int sheetNamePos = index - 1;
        //*index -1* because the range is 1 >= index <= list length
        if ((sheetNamePos < capacity) && (sheetNamePos >= 0)) {
            return tabs[sheetNamePos];
        } else {
            return null;
        }
    }
    //rename
    public int rename(String currentName, String newName) {
        int renamePos = index(currentName);
        if(renamePos != -1) {
            tabs[renamePos] = newName;
            return renamePos;
        } else {
            return -1;
        }
    }
    //moveToEnd by index position
    public String moveToEnd(int from) {
        if ((from < capacity) && (from >= 0)) {
            String output = tabs[from - 1];
            remove(from); //did not decrement from as the remove function decrements it.
            tabs[capacity] = output;
            capacity++; //incremented capactiy as the remove function decrements it but we don't want it to change in this case..
            return output;
        } else {
            return null;
        }
    }
    //moveToEnd by sheet name
    public int moveToEnd(String from) {
        int moveEndPos = index(from);        
        if (moveEndPos != -1) {
            moveEndPos++; //incremented moveEndPos so that the previous moveToEnd function can be used.
            int output = index(from);
            moveToEnd(moveEndPos);
            return output;
        } else {
            return moveEndPos;
        }
    }
    //move by sheet position
    public String move(int from, int to, boolean before) {
        if((from > capacity) || (to > capacity) || (from == to) || (from <= 0) || (to <= 0)) {
            return null;
        } else {
            to--;
            from--; //decremented to and for as users would input 1 for position 0 and so on...
            String temp1 = tabs[from];
            if (from < to) {
                if(before == true) {
                    to--;
                }
                for(from = from; from < to; from++) {
                    tabs[from] = tabs[from + 1];
                }
                tabs[to] = temp1;
                return temp1;
            } else {
                if (before == false) {
                    to++;
                }
                for(from = from; from > to; from--) {
                    tabs[from] = tabs[from - 1];
                }    
                tabs[to] = temp1;
                return temp1;
            }
        }
    }
    //move by sheet name
    public int move(String from, String to, boolean before) {
        int toPos = index(to);
        int fromPos = index(from);
        if ((fromPos != -1) || (toPos >= -1) || (toPos != fromPos)){
                    toPos++;
                    fromPos++; //incremented toPos and fromPos so that the previous move class can be used.
                    if(before == true) {
                        move(fromPos,toPos, true);
                        return fromPos;
                    } else {
                        move(fromPos,toPos, false);
                        return fromPos;
                    }
            }
        return -1;
    }
}
